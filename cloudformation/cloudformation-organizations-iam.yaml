AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  License: Apache-2.0
Description: "CloudFormation template for CloudAdmin onboarding for users using AWS Organizations. This will create an IAM role, custom policy apply that to the IAM role, and also give the IAM role the proper read only policy for the cost & usage report."
Resources:
  CloudAdminUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Join [ "_", [ "CloudAdminOrganizationIAM", !Ref "AWS::StackName" ] ]

  CloudAdminKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref "CloudAdminUser"

  AdministrationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSCloudFormationStackSetAdministrationRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AssumeRole-AWSCloudFormationStackSetExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - "arn:*:iam::*:role/AWSCloudFormationStackSetExecutionRole"

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSCloudFormationStackSetExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref "AWS::AccountId"
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess

  CloudAdminOrganizationIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudAdminOrganizationIAMPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: 
              - organizations:ListAccounts
              - sts:AssumeRole
              - sts:GetCallerIdentity
            Resource: "*"
      Users:
        - !Ref "CloudAdminUser"

  CloudAdminAccountSet:
    Type: AWS::CloudFormation::StackSet
    DependsOn: "ListAccounts"
    Properties:
      AdministrationRoleARN: arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess
      AutoDeployment:
        - Enabled: true
      Description: "Applies CloudAdminIAM for each account in the AWS Organization"
      Parameters:
        - AccountNumbers: !GetAtt [ListAccounts, Ids]
      PermissionModel: SERVICE_MANAGED
      StackSetName: !Join [ "_", [ "CloudAdminStack", !Ref "AWS::Region" ] ]
      TemplateURL: "https://s3-us-west-2.amazonaws.com/cf-templates-gjdxf8leg5jf-us-west-2/2021098lim-template1vyasj0xqmcd"

  ListAccounts:
    Type: Custom::ListAccounts
    DependsOn: "CloudAdminOrganizationIAMPolicy"
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - ListAccountsFunction
          - Arn
      Input1:
        Ref: CloudAdminKeys
      Input2:
        Fn::GetAtt:
          - CloudAdminKeys
          - SecretAccessKey
      Input3:
        Ref: AWS::AccountId

  ListAccountsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Listing Organization account ids"
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Runtime: python3.8
      Timeout: 30
      Handler: index.lambda_handler
      Code:
        ZipFile:
          Fn::Sub: |-
            #!/usr/bin/env python3

            import cfnresponse
            import logging
            import traceback

            LOGGER = logging.getLogger()
            LOGGER.setLevel(logging.INFO)

            def lambda_handler(event, context):
                LOGGER.info('Event structure: %s', event)
                LOGGER.info('Resources: %s', event['ResourceProperties'])

                access_key = event['ResourceProperties']['Input1']
                secret_key = event['ResourceProperties']['Input2']
                root_account = event['ResourceProperties']['Input3']

                import boto3
                organizations_client = boto3.client('organizations', aws_access_key_id=access_key, aws_secret_access_key=secret_key)
                sts_client = boto3.client('sts', aws_access_key_id=access_key, aws_secret_access_key=secret_key)

                try:
                    accounts = organizations_client.list_accounts()
                    LOGGER.info('Accounts: %s', accounts)

                    owner = sts_client.get_caller_identity()
                    LOGGER.info('Caller: %s', owner)

                    account_ids = []
                    for account in accounts['Accounts']:
                        account_id = account['Id']
                        if account_id == root_account:
                            continue
                        account_ids.append(account_id)

                    response_data = {"Ids": account_ids}
                except Exception as e:
                    LOGGER.error(e)
                    traceback.print_exc()
                    response_data = {}
                finally:
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

  LambdaExecutionRole: #IAM Role for Custom Resource
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

Outputs:

  AccessKey:
    Value: !Ref "CloudAdminKeys"
    Description: AWSAccessKeyId of new user

  SecretKey:
    Value: !GetAtt [CloudAdminKeys, SecretAccessKey]
    Description: AWSSecretAccessKey of new user

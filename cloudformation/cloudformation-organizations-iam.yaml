AWSTemplateFormatVersion: "2010-09-09"

Metadata:
  License: Apache-2.0

Description: "CloudFormation template for CloudAdmin onboarding for users using AWS Organizations. This will create an IAM role, custom policy apply that to the IAM role, and also give the IAM role the proper read only policy for the cost & usage report."

Parameters:

  S3BucketName:
    Type: String
    Description: S3 bucket name where the S3 Policy will be applied to.
    AllowedPattern: ".+"
    MinLength: 1

Resources:

  CloudAdminUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Join [ "_", [ "CloudAdminOrganizationIAM", !Ref "AWS::StackName" ] ]

  CloudAdminKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref "CloudAdminUser"

  CloudAdminOrganizationIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudAdminOrganizationIAMPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - organizations:ListAccounts
              - sts:AssumeRole
              - sts:GetCallerIdentity
            Resource: "*"
      Users:
        - !Ref "CloudAdminUser"

  CloudAdminOrganizationS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudAdminOrganizationS3Policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Sub "arn:aws:s3:::${S3BucketName}"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
          - Effect: Allow
            Action:
              - cur:PutReportDefinition
            Resource: !Sub "arn:aws:cur:*:${AWS::AccountId}:definition/*"
      Users:
        - !Ref "CloudAdminUser"

  CostReportFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Creates a new daily billing usage report."
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Runtime: python3.8
      Timeout: 10
      Handler: index.lambda_handler
      Code:
        ZipFile:
          Fn::Sub: |-
            #!/usr/bin/env python3

            import boto3

            import logging
            import cfnresponse
            import traceback

            LOGGER = logging.getLogger()
            LOGGER.setLevel(logging.INFO)


            def lambda_handler(event, context):
                LOGGER.info('Event structure: %s', event)
                LOGGER.info('Resources: %s', event['ResourceProperties'])

                access_key = event['ResourceProperties']['Input1']
                secret_key = event['ResourceProperties']['Input2']
                bucket = event['ResourceProperties']['Input3']

                location = ''

                try:
                    s3_client = boto3.client('s3', aws_access_key_id=access_key, aws_secret_access_key=secret_key)
                    location_response = s3_client.get_bucket_location(Bucket=bucket)
                    location = location_response['LocationConstraint']
                    LOGGER.info('Bucket read')
                    LOGGER.info(location_response)
                except Exception as ex:
                    LOGGER.info(str(ex))

                prefix = 'cloudadmin-billing'
                response_data = {'bucket': bucket, 'prefix': prefix, 'location': location}
                try:
                    cur_client = boto3.client('cur', region_name=location, aws_access_key_id=access_key, aws_secret_access_key=secret_key)
                    report = cur_client.put_report_definition(
                        ReportDefinition={
                            'ReportName': 'billing-data-cloudadmin',
                            'TimeUnit': 'DAILY',
                            'Format': 'textORcsv',
                            'AdditionalSchemaElements': [
                                'RESOURCES'
                            ],
                            'Compression': 'GZIP',
                            'S3Bucket': bucket,
                            'S3Prefix': prefix,
                            'S3Region': location
                        }
                    )
                    LOGGER.info('Report created')
                    LOGGER.info(report)
                except Exception as ex:
                    LOGGER.info(str(ex))
                    traceback.print_exc()
                finally:
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  CostReport:
    Type: Custom::CostReport
    DependsOn: "CloudAdminS3Policy"
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CostReportFunction
          - Arn
      Input1:
        Ref: CloudAdminKeys
      Input2:
        Fn::GetAtt:
          - CloudAdminKeys
          - SecretAccessKey
      Input3:
        Ref: S3BucketName

Outputs:

  AccessKey:
    Value: !Ref "CloudAdminKeys"
    Description: AWSAccessKeyId of new user

  SecretKey:
    Value: !GetAtt [CloudAdminKeys, SecretAccessKey]
    Description: AWSSecretAccessKey of new user

  Bucket:
    Value: !GetAtt [ CostReport, bucket ]
    Description: Bucket name of the new user

  BucketPrefix:
    Value: !GetAtt [ CostReport, prefix ]
    Description: Bucket prefix of the new user

  BucketLocation:
    Value: !GetAtt [ CostReport, location ]
    Description: Location of the bucket

AWSTemplateFormatVersion: "2010-09-09"

Metadata:
  License: Apache-2.0

Description: "CloudFormation template for CloudAdmin onboarding. This will create an IAM role, custom policy apply that to the IAM role, and also give the IAM role the proper read only policy for the cost & usage report."

Parameters:

  S3BucketName:
    Type: String
    Description: New S3 bucket name for creation.
    AllowedPattern: ".+"
    MinLength: 1
    Default: <cloudadmin-companyname-billing>

Resources:

  CloudAdminUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Join [ "_", [ "CloudAdminIAM", !Ref "AWS::StackName" ] ]

  CloudAdminS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref S3BucketName
      AccessControl: BucketOwnerRead

  CloudAdminBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudAdminS3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: billingreports.amazonaws.com
            Action:
              - s3:GetBucketAcl
              - s3:GetBucketPolicy
            Resource: !Sub "arn:aws:s3:::${CloudAdminS3Bucket}"
          - Effect: Allow
            Principal:
              Service: billingreports.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${CloudAdminS3Bucket}/*"

  CloudAdminIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudAdminIAMPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:Describe*
              - cloudwatch:Get*
              - cloudwatch:List*
              - ec2:DeleteSnapshot
              - ec2:DeleteVolume
              - ec2:Describe*
              - ec2:PurchaseReservedInstancesOffering
              - ec2:ReleaseAddress
              - ec2:StartInstances
              - ec2:StopInstances
              - elasticache:Describe*
              - elasticache:ListTagsForResource
              - elasticache:PurchaseReservedCacheNodesOffering
              - elasticloadbalancing:DeleteLoadBalancer
              - elasticloadbalancing:Describe*
              - es:Describe*
              - es:ListDomainNames
              - es:ListTags
              - es:PurchaseReservedElasticsearchInstanceOffering
              - rds:DeleteDBSnapshot
              - rds:Describe*
              - rds:ListTagsForResource
              - rds:PurchaseReservedDBInstancesOffering
              - rds:StartDBInstance
              - rds:StopDBInstance
              - redshift:Describe*
              - redshift:PauseCluster
              - redshift:PurchaseReservedNodeOffering
              - redshift:ResumeCluster
              - savingsplans:CreateSavingsPlan
              - savingsplans:Describe*
              - sts:GetCallerIdentity
            Resource: "*"
      Users:
        - !Ref "CloudAdminUser"

  CloudAdminS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudAdminS3Policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Sub "arn:aws:s3:::${CloudAdminS3Bucket}"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Sub "arn:aws:s3:::${CloudAdminS3Bucket}/*"
          - Effect: Allow
            Action:
              - cur:PutReportDefinition
            Resource: !Sub "arn:aws:cur:*:${AWS::AccountId}:definition/*"
      Users:
        - !Ref "CloudAdminUser"

  CloudAdminKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref "CloudAdminUser"

  CostReportFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Creates a new daily billing usage report."
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Runtime: python3.8
      Timeout: 30
      Handler: index.lambda_handler
      Code:
        ZipFile:
          Fn::Sub: |-
            #!/usr/bin/env python3

            import boto3
            import uuid

            import cfnresponse


            def lambda_handler(event, context):
                access_key = event['ResourceProperties']['Input1']
                secret_key = event['ResourceProperties']['Input2']
                bucket = event['ResourceProperties']['Input3']

                request_type = event['RequestType']
                print(f'Request Type: {request_type}')

                if request_type == 'Delete':
                    return cleanup(event, context, bucket)

                s3_client = boto3.client('s3', aws_access_key_id=access_key, aws_secret_access_key=secret_key)
                cur_client = boto3.client('cur', region_name='us-east-1', aws_access_key_id=access_key, aws_secret_access_key=secret_key)
                return creating_report(event, context, cur_client, s3_client, bucket)


            def cleanup(event, context, bucket_name):
                print('Attempting clean up')
                file_name = 'aws-programmatic-access-test-object'
                try:
                    print(f'Deleting file {file_name} from bucket')
                    s3 = boto3.resource('s3')
                    bucket = s3.Bucket(bucket_name)
                    resp = bucket.delete_objects(
                        Delete={
                            'Objects': [
                                {
                                    'Key': file_name
                                },
                            ],
                            'Quiet': True
                        })
                    print(f'Succeeded in deleting objects with response {resp}')

                    print(f'Deleting bucket {bucket_name}')
                    bucket.delete()
                    print(f'Bucket {bucket_name} deleted')
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                except Exception as ex:
                    print(str(ex))
                    cfnresponse.send(event, context, cfnresponse.FAILED, {})


            def creating_report(event, context, cur_client, s3_client, bucket):
                location = ''
                print('Attempting to locate bucket')
                try:
                    location_response = s3_client.get_bucket_location(Bucket=bucket)
                    location = location_response['LocationConstraint']
                    print(f'Bucket location: {location}')
                except Exception as ex:
                    print(str(ex))

                if not location:
                    print('Defaulting to us-east-1')
                    location = 'us-east-1'

                prefix = 'cloudadmin-billing'
                name = f'billing-cloudadmin-{uuid.uuid4()}'
                response_data = {'bucket': bucket, 'prefix': prefix, 'location': location}

                print(f'Attempting to create report for bucket {bucket}')
                try:
                    report = cur_client.put_report_definition(
                        ReportDefinition={
                            'ReportName': name,
                            'TimeUnit': 'DAILY',
                            'Format': 'textORcsv',
                            'AdditionalSchemaElements': [
                                'RESOURCES'
                            ],
                            'Compression': 'GZIP',
                            'S3Bucket': bucket,
                            'S3Prefix': prefix,
                            'S3Region': location,
                        }
                    )
                    print(f'Report created with name {name}')
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                except Exception as ex:
                    message = str(ex)
                    print(message)

                    if 'ReportLimitReachedException' in message:
                        message = 'You have reached the limit of possible reports created.'

                    cfnresponse.send(event, context, cfnresponse.FAILED, {'error': message})


  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:DeleteBucket
                Resource: !Sub "arn:aws:s3:::${CloudAdminS3Bucket}"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource: !Sub "arn:aws:s3:::${CloudAdminS3Bucket}/*"

  CostReport:
    Type: Custom::CostReport
    DependsOn:
      - "CloudAdminS3Policy"
      - "CloudAdminS3Bucket"
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CostReportFunction
          - Arn
      Input1:
        Ref: CloudAdminKeys
      Input2:
        Fn::GetAtt:
          - CloudAdminKeys
          - SecretAccessKey
      Input3:
        Ref: CloudAdminS3Bucket

Outputs:

  AccessKey:
    Value: !Ref "CloudAdminKeys"
    Description: AWS Access Key to be used on CloudAdmin

  SecretKey:
    Value: !GetAtt [ CloudAdminKeys, SecretAccessKey ]
    Description: AWS Secret Access Key to be used on CloudAdmin

  Bucket:
    Value: !GetAtt [ CostReport, bucket ]
    Description: Bucket name  to be used on CloudAdmin

  BucketPrefix:
    Value: !GetAtt [ CostReport, prefix ]
    Description: Bucket prefix to be used on CloudAdmin

  BucketLocation:
    Value: !GetAtt [ CostReport, location ]
    Description: Location of the bucket created
